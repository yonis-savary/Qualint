#!/usr/bin/env php
<?php

namespace YonisSavary\Qualint;

use Throwable;

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

class CommandRunner
{
    protected static $isVerbose = 0;
    protected static $argv = [];
    protected static $limit = null;

    public static function displayHelp()
    {
        echo join("\n", [
            'Qualint command by Yonis SAVARY (YonisSavary on github)',
            '',
            'Console options:',
            '--help    Display this help',
            '--verbose Enable verbose/debug mode',
            '',
            'Output options:',
            '--behavior=<mode>     Output mode',
            '           PREVIEW    (Default) Display in console needed changes',
            '           BACKUP     Make a backup file next to the original',
            '           OVERWRITE  Directly overwrite the file ',
            '           CLONE      Write in a clone next to the original file ',
        ])."\n\n";
        die;
    }

    public static function log(string $log)
    {
        if (!self::$isVerbose)
            return ;

        echo $log . "\n";
    }

    public static function argIsPresent(string $long)
    {
        $long = "--$long";

        if (in_array($long, self::$argv))
            return true;

        foreach (self::$argv as $argument)
        {
            if (str_starts_with($argument, $long))
                return true;
        }
        return false;
    }

    public static function argValue(string $long)
    {
        $value = null;
        $long = "--$long";
        foreach (self::$argv as $arg)
        {
            if (!str_starts_with($arg, $long))
                continue;

            $value = substr($arg, strlen($long));
            $value = preg_replace("/^=[\"']?|[\"']?$/", "", $value);
        }
        if ($value)
            return $value;
        return null;
    }

    public static function exploreDirectory(string $path, int $sizeAcc=0)
    {
        $results = [];
        foreach (array_slice(scandir($path), 2) as $dirOfFileName)
        {
            if (self::$limit && $sizeAcc + count($results) >= self::$limit)
                return $results;

            $dirOfFile = $path . DIRECTORY_SEPARATOR . $dirOfFileName;
            if (str_ends_with($dirOfFile, ".php") && is_file($dirOfFile))
                $results[] = $dirOfFile;
            else if (is_dir($dirOfFile) && $dirOfFileName !== "vendor")
                array_push($results, ...self::exploreDirectory($dirOfFile, count($results) + $sizeAcc));
        }
        return $results;
    }

    public static function launch($argv)
    {
        self::$argv = $argv;

        if (self::argIsPresent("help"))
            self::displayHelp();

        self::$isVerbose = self::argIsPresent("verbose");

        if ($bootstrap = self::argValue("bootstrap"))
        {
            if (!is_file($bootstrap))
                die("Cannot find bootstrap file [$bootstrap]");

            try
            {
                require_once $bootstrap;
            }
            catch(Throwable $err)
            {
                die("Cannot require bootstrap file [$bootstrap] : ". $err->getMessage());
            }
        }

        $limit = &self::$limit;
        $limit = intval(self::argValue("limit"));
        if ($limit)
            self::log("Using file limit : $limit");

        $behavior = self::argValue("behavior") ?? "PREVIEW";
        if (!defined(Qualint::class."::BEHAVE_".$behavior))
            die("Undefined behavior [$behavior]\n");

        self::log("Using behavior [$behavior]\n");
        $behavior = constant(Qualint::class."::BEHAVE_".$behavior);

        $dirToAnalyse = [];
        foreach (self::$argv as $arg)
        {
            if (str_starts_with($arg, "-"))
                continue;

            if (!is_dir($arg))
            {
                self::log("[$arg] directory not found");
                continue;
            }
            $dirToAnalyse[] = $arg;
        }

        $files = [];
        foreach ($dirToAnalyse as $directory)
        {
            array_push($files, ...self::exploreDirectory($directory));
            if ($limit && count($files) >= $limit)
                break;
        }

        if ($limit)
            $files = array_slice($files, 0, $limit);

        if (!count($files))
            die("Not file found!\n");

        $instance = new Qualint($files, [[self::class, "log"]], $behavior);
        $instance->launch();
    }
}

CommandRunner::launch(array_slice($argv, 1));